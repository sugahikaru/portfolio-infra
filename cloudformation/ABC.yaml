AWSTemplateFormatVersion: 2010-09-09

Description: task10 for raiseTech

Parameters:
  BaseName:
    Description: resourse system name
    Type: String
    Default: My

  OutputName:
    Description: output name
    Type: String
    Default: raisetech

  Subnet1a:
    Description: Subnet1a AvailabilityZone
    Type: String
    Default: ap-northeast-1a

  Subnet1c:
    Description: Subnet1c AvailabilityZone
    Type: String
    Default: ap-northeast-1c

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-vpc

  Subnet1aPv:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Subnet1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-subnet1apv

  Subnet1cPv:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Subnet1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-subnet1cpv

  Subnet1aPb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Subnet1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-subnet1apb

  Subnet1cPb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Subnet1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-subnet1cpb

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref Igw

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-routetable

  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

  RouteTablePublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1aPb
      RouteTableId: !Ref RouteTable

  RouteTablePublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1cPb
      RouteTableId: !Ref RouteTable

  SecurityGroupEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-ec2sg

  RDSsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroupEC2
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-rdssg

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}"
      InstanceType: t2.micro
      SubnetId: !Ref Subnet1aPb
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      KeyName: SugaHikaru2
      Monitoring: false
      SecurityGroupIds:
        - !Ref SecurityGroupEC2
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-ec2

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Port: 3306
      StorageType: gp2
      BackupRetentionPeriod: 1
      MasterUsername: root
      MasterUserPassword: rootroot
      PreferredBackupWindow: 15:00-16:00
      PreferredMaintenanceWindow: sun:18:00-sun:19:00
      DBName: awsstudy
      Engine: mysql
      EngineVersion: 8.0.41
      LicenseModel: general-public-license
      DBSubnetGroupName: !Ref SubnetGroup
      VPCSecurityGroups:
        - !Ref RDSsg
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-rds

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBsubnetgroup for MySQL
      SubnetIds:
        - !Ref Subnet1aPv
        - !Ref Subnet1cPv

  ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${BaseName}-alb
      Subnets:
        - !Ref Subnet1aPb
        - !Ref Subnet1cPb
      SecurityGroups:
        - !Ref SecurityGroupEC2
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-alb

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${BaseName}-tg
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 10
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: !Sub ${BaseName}-tg
      Targets:
        - Id: !Ref EC2Instance
          Port: 8080

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
